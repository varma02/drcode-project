{
  "openapi": "3.0.2",
  "info": {
    "title": "DR.CODE Project",
    "version": "0.0.1",
    "description": "This is the API documentation for DR.CODE Kecskem√©t's management application"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000",
      "description": "localhost"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Hello world",
        "description": "This is a test endpoint, it simply returns hello world.",
        "parameters": [],
        "security": [],
        "responses": {
          "200": {
            "description": "Hello world",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Hello, World!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get the logged in user",
        "description": "Retrieves the properties of the authorized user",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetTheLoggedInUserOk",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "success"
                      ],
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "employee": {
                          "$ref": "#/components/schemas/Employee"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request succeeded, user data can be found in the response."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "getTheLoggedInUser"
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login with email and password",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LoginWithEmailAndPasswordOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "token",
                        "employee"
                      ],
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "IJOFf87VizgIUZGIU762Vtuv2IUGIU288"
                        },
                        "employee": {
                          "$ref": "#/components/schemas/Employee"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The login was successful. A token was created and sent in the response along with the account data."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [],
        "description": "This endpoint is used for logging in employees of the company via email and password authentication. It is accessible without any prior authorization.",
        "operationId": "loginWithEmailAndPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "remember"
                ],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "password": {
                    "type": "string",
                    "example": "verysecurepassword1234"
                  },
                  "remember": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "The required JSON request body for logging in a user."
        }
      }
    },
    "/auth/update": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Update account",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAccountOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "employee"
                      ],
                      "properties": {
                        "employee": {
                          "$ref": "#/components/schemas/Employee"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the user was updated."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [],
        "description": "Update parameters on the logged in user. (eg. name)",
        "operationId": "updateAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "old_password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "new_password": {
                    "type": "string",
                    "example": "w2C62kvqCHv7g3mnHY67"
                  },
                  "old_password": {
                    "type": "string",
                    "example": "w2C62kvqCHv7g3mnHY67"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "The employee's id and any other updatable properties"
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create a new user with an invite",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateANewUserWithAnInviteCreated",
                  "required": ["code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and a new employee was created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [],
        "description": "This endpoint registers a new employee given a valid invite.",
        "operationId": "createANewUserWithAnInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "invite_id",
                  "name",
                  "password",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "password": {
                    "type": "string",
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*\\W).{8,}$",
                    "example": "Password1234#"
                  },
                  "invite_id": {
                    "$ref": "#/components/schemas/Invite/properties/id"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "The request body for registering a new user/employee."
        }
      }
    },
    "/auth/clear-sessions": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout the user from all devices",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LogoutTheUserFromAllDevicesOk",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the sessions were cleared."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Given an authorization token, this endpoint updates a user's session key therefor logging them out from all active devices",
        "operationId": "logoutTheUserFromAllDevices"
      }
    },
    "/auth/replace-profile-picture": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Update profile picture",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateProfilePictureOk",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "enum": [
                        "success"
                      ],
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "token",
                        "path"
                      ],
                      "properties": {
                        "path": {
                          "type": "string",
                          "format": "uri",
                          "example": "/employee:1234/profile_picture.webp",
                          "pattern": "^/employee:.+/profile_picture\\.webp$"
                        },
                        "token": {
                          "type": "string",
                          "example": "w2C62kvqCHv7g3mnHY67"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, the user can now upload their new profile picture with the provided token and path. See more at /upload"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the nessesary token and file path to be able to upload a new profile picture.",
        "operationId": "updateProfilePicture"
      }
    },
    "/employee/all": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get all employees",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetAllEmployeesOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "employees"
                      ],
                      "properties": {
                        "employees": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the server has returned the employees in the response body."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not authorized to perform this action."
                    }
                  }
                }
              }
            },
            "description": "Unauthorized - The user does not have admin rights to access this endpoint"
          }
        },
        "parameters": [],
        "description": "Retrieves a list of all employee records. Only accessible to administrators.",
        "operationId": "getAllEmployees"
      }
    },
    "/employee/get": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get employees by id",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetEmployeesByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "employees"
                      ],
                      "properties": {
                        "employees": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EmployeeExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the server has returned the requested employees in the response body."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "regex",
              "description": "Comma-separated list of employee IDs to retrieve",
              "example": "employee:12345,employee:67890",
              "pattern": "^(employee:\\w+,)*employee:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "description": "Get one or more employees with the ability to fetch record links.",
        "operationId": "getEmployeesById"
      }
    },
    "/employee/remove": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Remove employees",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveEmployeesOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "employees"
                      ],
                      "properties": {
                        "employees": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Employee"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, the requested employees were deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "description": "This endpoint is used for removing or deleting employee(s) from the database. Only administrators can make these requests.",
        "operationId": "removeEmployees",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    },
                    "description": "The ids of the employees you want to delete"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Request body for deleting an employee or multiple employees"
        }
      }
    },
    "/employee/update": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Update an employee",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAnEmployeeOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "employee"
                      ],
                      "properties": {
                        "employee": {
                          "$ref": "#/components/schemas/Employee"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the employee was updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This endpoint can be used to update an employee as an administrator. It is different from the account update in that it can also change an employee's assigned roles.",
        "operationId": "updateAnEmployee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Employee/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          },
          "required": true,
          "description": ""
        }
      }
    },
    "/location/all": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "List all locations",
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllLocationsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "locations"
                      ],
                      "properties": {
                        "locations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful and locations were retrieved"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not authorized to perform this action."
                    }
                  }
                }
              }
            },
            "description": "Unauthorized - The user does not have admin rights to access this endpoint"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This endpoint is used to list all locations. Only available to admins.",
        "operationId": "listAllLocations"
      }
    },
    "/location/get": {
      "get": {
        "summary": "Get locations by id",
        "description": "Get one or more location(s) with the ability to fetch record links.",
        "tags": [
          "location"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetLocationsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "locations"
                      ],
                      "properties": {
                        "locations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LocationExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful and the requested locations were retrieved."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of location IDs to retrieve",
              "example": "location:12345,location:67890",
              "pattern": "^(location:\\w+,)*location:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getLocationsById"
      }
    },
    "/location/remove": {
      "post": {
        "summary": "Remove locations",
        "description": "This endpoint is used for removing or deleting location(s) from the database. Only administrators can make these requests.",
        "tags": [
          "location"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested locations were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveLocationsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "locations"
                      ],
                      "properties": {
                        "locations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Location"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeLocations",
        "requestBody": {
          "required": true,
          "description": "Request body for deleting a location or multiple locations",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Location/properties/id"
                    },
                    "description": "The ids of the locations you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/location/update": {
      "post": {
        "summary": "Update a location",
        "description": "This endpoint can be used to update a location as an administrator.",
        "tags": [
          "location"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the location was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateALocationOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "location"
                      ],
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateALocation",
        "requestBody": {
          "description": "The request body for updating a location.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Location/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "Kecskem√©ti Kod√°ly Zolt√°n √ânek-Zenei √Åltal√°nos Iskola"
                  },
                  "address": {
                    "type": "string",
                    "example": "6000 Kecskem√©t, D√≥zsa Gy√∂rgy √∫t 22."
                  },
                  "contact_email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "contact_phone": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/location/create": {
      "post": {
        "summary": "Create a new location",
        "description": "This endpoint is used to create a new location. Only available to admins.",
        "tags": [
          "location"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the location was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateALocationCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "location"
                      ],
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createALocation",
        "requestBody": {
          "description": "The request body for creating a new location.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "address",
                  "contact_email",
                  "contact_phone"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Kecskem√©ti Kod√°ly Zolt√°n √ânek-Zenei √Åltal√°nos Iskola"
                  },
                  "address": {
                    "type": "string",
                    "example": "6000 Kecskem√©t, D√≥zsa Gy√∂rgy √∫t 22."
                  },
                  "contact_email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "contact_phone": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subject/all": {
      "get": {
        "summary": "List all subjects",
        "description": "This endpoint is used to list all subjects. Only available to admins.",
        "tags": [
          "subject"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllSubjectsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "subjects"
                      ],
                      "properties": {
                        "subjects": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Subject"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful and subjects were retrieved"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "message"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not authorized to perform this action."
                    }
                  }
                }
              }
            },
            "description": "Unauthorized - The user does not have admin rights to access this endpoint"
          }
        },
        "parameters": [],
        "operationId": "listAllSubjects"
      }
    },
    "/subject/get": {
      "get": {
        "summary": "Get subjects by id",
        "description": "Get one or more subject(s) with the ability to fetch record links.",
        "tags": [
          "subject"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested subjects were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetSubjectsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "subjects"
                      ],
                      "properties": {
                        "subjects": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Subject"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of subject IDs to retrieve",
              "example": "subject:12345,subject:67890",
              "pattern": "^(subject:\\w+,)*subject:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getSubjectsById"
      }
    },
    "/subject/remove": {
      "post": {
        "summary": "Remove subjects",
        "description": "This endpoint is used for removing or deleting subject(s) from the database. Only administrators can make these requests.",
        "tags": [
          "subject"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested subjects were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveSubjectsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "subjects"
                      ],
                      "properties": {
                        "subjects": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Subject"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeSubjects",
        "requestBody": {
          "description": "Request body for deleting a subject or multiple subjects",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Subject/properties/id"
                    },
                    "description": "The ids of the subjects you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subject/update": {
      "post": {
        "summary": "Update a subject",
        "description": "This endpoint can be used to update a subject as an administrator.",
        "tags": [
          "subject"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the subject was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateASubjectOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "subject"
                      ],
                      "properties": {
                        "subject": {
                          "$ref": "#/components/schemas/Subject"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateASubject",
        "requestBody": {
          "description": "The request body for updating a subject.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Subject/properties/id"
                  },
                  "name": {
                    "$ref": "#/components/schemas/Subject/properties/name"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Subject/properties/description"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subject/create": {
      "post": {
        "summary": "Create a new subject",
        "description": "This endpoint is used to create a new subject. Only available to admins.",
        "tags": [
          "subject"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the subject was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateASubjectCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "subject"
                      ],
                      "properties": {
                        "subject": {
                          "$ref": "#/components/schemas/Subject"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createASubject",
        "requestBody": {
          "description": "The request body for creating a new subject.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/Subject/properties/name"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Subject/properties/description"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/student/all": {
      "get": {
        "summary": "List all students",
        "description": "This endpoint is used to list all students. Only available to admins.",
        "tags": [
          "student"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and students were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllStudentsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "students"
                      ],
                      "properties": {
                        "students": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Student"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "listAllStudents"
      }
    },
    "/student/get": {
      "get": {
        "summary": "Get students by id",
        "description": "Get one or more student(s) with the ability to fetch record links.",
        "tags": [
          "student"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested students were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetStudentsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "students"
                      ],
                      "properties": {
                        "students": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StudentExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of student IDs to retrieve",
              "example": "student:12345,student:67890",
              "pattern": "^(student:\\w+,)*student:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getStudentsById"
      }
    },
    "/student/remove": {
      "post": {
        "summary": "Remove students",
        "description": "This endpoint is used for removing or deleting student(s) from the database. Only administrators can make these requests.",
        "tags": [
          "student"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested students were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveStudentsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "students"
                      ],
                      "properties": {
                        "students": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Student"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeStudents",
        "requestBody": {
          "description": "Request body for deleting a student or multiple students",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Student/properties/id"
                    },
                    "description": "The ids of the students you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/student/update": {
      "post": {
        "summary": "Update a student",
        "description": "This endpoint can be used to update a student as an administrator.",
        "tags": [
          "student"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the student was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAStudentOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "student"
                      ],
                      "properties": {
                        "student": {
                          "$ref": "#/components/schemas/Student"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful, and the student was updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateAStudent",
        "requestBody": {
          "description": "The request body for updating a student.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Student/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "parent": {
                    "type": "object",
                    "description": "The name of the parent or guardian",
                    "required": [
                      "name",
                      "email",
                      "phone"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Jane Doe"
                      },
                      "email": {
                        "$ref": "#/components/schemas/Email"
                      },
                      "phone": {
                        "$ref": "#/components/schemas/PhoneNumber"
                      }
                    }
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "phone": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/student/create": {
      "post": {
        "summary": "Create a new student",
        "description": "This endpoint is used to create a new student. Only available to admins.",
        "tags": [
          "student"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the student was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAStudentCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "student"
                      ],
                      "properties": {
                        "student": {
                          "$ref": "#/components/schemas/Student"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAStudent",
        "requestBody": {
          "description": "The request body for creating a new student.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "parent",
                  "email",
                  "phone"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "parent": {
                    "type": "object",
                    "description": "The name of the parent or guardian",
                    "required": [
                      "name",
                      "email",
                      "phone"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Jane Doe"
                      },
                      "email": {
                        "$ref": "#/components/schemas/Email"
                      },
                      "phone": {
                        "$ref": "#/components/schemas/PhoneNumber"
                      }
                    }
                  },
                  "email": {
                    "$ref": "#/components/schemas/Email"
                  },
                  "phone": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lesson/all": {
      "get": {
        "summary": "List all lessons",
        "description": "This endpoint is used to list all lessons. Only available to admins.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and lessons were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllLessonsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lessons"
                      ],
                      "properties": {
                        "lessons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Lesson"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "listAllLessons"
      }
    },
    "/lesson/get": {
      "get": {
        "summary": "Get lessons by id",
        "description": "Get one or more lesson(s) with the ability to fetch record links.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested lessons were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetLessonsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lessons"
                      ],
                      "properties": {
                        "lessons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LessonExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful and the requested lessons were retrieved."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of lesson IDs to retrieve",
              "example": "lesson:12345,lesson:67890",
              "pattern": "^(lesson:\\w+,)*lesson:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getLessonsById"
      }
    },
    "/lesson/between_dates": {
      "get": {
        "summary": "Get lessons between two dates",
        "description": "Get the lessons starting between two dates.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested lessons were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetLessonsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lessons"
                      ],
                      "properties": {
                        "lessons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LessonExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "The start date of the range",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-01T00:00:00.000Z"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The end date of the range",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-10T23:59:59.000Z"
            }
          },
          {
            "$ref": "#/components/parameters/fetch"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "operationId": "getLessonsBetweenDates"
      }
    },
    "/lesson/next": {
      "get": {
        "summary": "Get the next lesson",
        "description": "Retrieves the next upcoming lesson of a teacher.",
        "tags": ["lesson"],
        "security": [{"BearerJwt": []}],
        "operationId": "getNextLesson",
        "parameters": [
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "responses": {
          "200": {
            "description": "The request was successful, the lesson can be found in the response.",
            "content": {
              "application/json":{
                "schema": {
                  "title": "GetNextLessonOk",
                  "type": "object",
                  "required": ["data", "code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": ["lesson"],
                      "properties": {
                        "lesson": {
                          "$ref": "#/components/schemas/LessonExtended"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/lesson/remove": {
      "post": {
        "summary": "Remove lessons",
        "description": "This endpoint is used for removing or deleting lesson(s) from the database. Only administrators can make these requests.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested lessons were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveLessonsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lessons"
                      ],
                      "properties": {
                        "lessons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Lesson"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeLessons",
        "requestBody": {
          "description": "Request body for deleting a lesson or multiple lessons",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Lesson/properties/id"
                    },
                    "description": "The ids of the lessons you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lesson/update": {
      "post": {
        "summary": "Update a lesson",
        "description": "This endpoint can be used to update a lesson as an administrator.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the lesson was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateALessonOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lesson"
                      ],
                      "properties": {
                        "lesson": {
                          "$ref": "#/components/schemas/Lesson"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateALesson",
        "requestBody": {
          "description": "The request body for updating a lesson.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Lesson/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "Scratch lesson 1"
                  },
                  "group": {
                    "$ref": "#/components/schemas/Group/properties/id"
                  },
                  "location": {
                    "$ref": "#/components/schemas/Location/properties/id"
                  },
                  "teachers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    }
                  },
                  "start": {
                    "$ref": "#/components/schemas/Datetime"
                  },
                  "end": {
                    "$ref": "#/components/schemas/Datetime"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lesson/attendance": {
      "post": {
        "tags": ["lesson"],
        "summary": "Update attendance",
        "description": "This endpoint is used for updating the attendance record on lessons.",
        "security": [{"BearerJwt": []}],
        "operationId": "lessonUpdateAttendance",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Request body for updating attendance",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "students"],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Lesson/properties/id"
                  },
                  "students": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Student/properties/id"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the attendance was updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/lesson/create": {
      "post": {
        "summary": "Create a new lesson",
        "description": "This endpoint is used to create a new lesson. Only available to admins.",
        "tags": [
          "lesson"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the lesson was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateALessonCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "lesson"
                      ],
                      "properties": {
                        "lesson": {
                          "$ref": "#/components/schemas/Lesson"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createALesson",
        "requestBody": {
          "description": "The request body for creating a new lesson.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "start",
                  "end"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Scratch lesson 1"
                  },
                  "group": {
                    "$ref": "#/components/schemas/Group/properties/id"
                  },
                  "location": {
                    "$ref": "#/components/schemas/Location/properties/id"
                  },
                  "teachers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    }
                  },
                  "start": {
                    "$ref": "#/components/schemas/Datetime"
                  },
                  "end": {
                    "$ref": "#/components/schemas/Datetime"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invite/all": {
      "get": {
        "summary": "List all invites",
        "description": "This endpoint is used to list all invites. Only available to admins.",
        "tags": [
          "invite"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and invites were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllInvitesOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "invites"
                      ],
                      "properties": {
                        "invites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Invite"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "listAllInvites"
      }
    },
    "/invite/remove": {
      "post": {
        "summary": "Remove invites",
        "description": "This endpoint is used for removing or deleting invite(s) from the database. Only administrators can make these requests.",
        "tags": [
          "invite"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested invites were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveInvitesOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "invites"
                      ],
                      "properties": {
                        "invites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Invite"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeInvites",
        "requestBody": {
          "description": "Request body for deleting an invite or multiple invites",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Invite/properties/id"
                    },
                    "description": "The ids of the invites you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invite/create": {
      "post": {
        "summary": "Create a new invite",
        "description": "This endpoint is used to create a new invite. Only available to admins.",
        "tags": [
          "invite"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the invite was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAInviteCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "invite"
                      ],
                      "properties": {
                        "invite": {
                          "$ref": "#/components/schemas/Invite"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAInvite",
        "requestBody": {
          "description": "The request body for creating a new invite.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "roles"
                ],
                "properties": {
                  "roles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Role"
                    },
                    "example": [
                      "teacher",
                      "administrator"
                    ],
                    "description": "Roles assigned to the new employee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/group/all": {
      "get": {
        "summary": "List all groups",
        "description": "This endpoint is used to list all groups. Only available to admins.",
        "tags": [
          "group"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and groups were retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListAllGroupsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "listAllGroups"
      }
    },
    "/group/get": {
      "get": {
        "summary": "Get groups by id",
        "description": "Get one or more group(s) with the ability to fetch record links.",
        "tags": [
          "group"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested groups were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetGroupsByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupExtended"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "The request was successful and the requested groups were retrieved."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of group IDs",
              "example": "group:12345,group:67890",
              "pattern": "^(group:\\w+,)*group:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getGroupsById"
      }
    },
    "/group/remove": {
      "post": {
        "summary": "Remove groups",
        "description": "This endpoint is used for removing or deleting group(s) from the database. Only administrators can make these requests.",
        "tags": [
          "group"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested groups were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveGroupsOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "groups"
                      ],
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Group"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeGroups",
        "requestBody": {
          "description": "Request body for deleting a group or multiple groups",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Group/properties/id"
                    },
                    "description": "The ids of the groups you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/group/update": {
      "post": {
        "summary": "Update a group",
        "description": "This endpoint can be used to update a group as an administrator.",
        "tags": [
          "group"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the group was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAGroupOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "group"
                      ],
                      "properties": {
                        "group": {
                          "$ref": "#/components/schemas/Group"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateAGroup",
        "requestBody": {
          "description": "The request body for updating a group.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Group/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "Kod√°ly 16:00 Scratch"
                  },
                  "location": {
                    "$ref": "#/components/schemas/Location/properties/id"
                  },
                  "archived": {
                    "type": "boolean",
                    "description": "Whether the group is archived or not",
                    "example": false
                  },
                  "teachers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/group/create": {
      "post": {
        "summary": "Create a new group",
        "description": "This endpoint is used to create a new group. Only available to admins.",
        "tags": [
          "group"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the group was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAGroupCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "group"
                      ],
                      "properties": {
                        "group": {
                          "$ref": "#/components/schemas/Group"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAGroup",
        "requestBody": {
          "description": "The request body for creating a new group.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "location",
                  "teachers"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Kod√°ly 16:00 Scratch"
                  },
                  "location": {
                    "$ref": "#/components/schemas/Location/properties/id"
                  },
                  "teachers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    }
                  },
                  "lessons": {
                    "type": "array",
                    "description": "Optionally you can create lessons along with a group",
                    "items": {
                      "type": "object",
                      "required": [
                        "start",
                        "end"
                      ],
                      "properties": {
                        "start": {
                          "$ref": "#/components/schemas/Datetime"
                        },
                        "end": {
                          "$ref": "#/components/schemas/Datetime"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enrolment/create": {
      "post": {
        "summary": "Enrol a student into a group",
        "description": "Update a group's enrolments to add a student",
        "tags": ["enrolment"],
        "operationId": "groupPostEnrol",
        "security": [{"BearerJwt": []}],
        "parameters": [],
        "requestBody": {
          "description": "Request body for enroling students",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "group", "student", "subject", "price"
                ],
                "properties": {
                  "group": {
                    "$ref": "#/components/schemas/Group/properties/id"
                  },
                  "student": {
                    "$ref": "#/components/schemas/Student/properties/id"
                  },
                  "subject": {
                    "$ref": "#/components/schemas/Subject/properties/id"
                  },
                  "price": {
                    "$ref": "#/components/schemas/EnroledRelation/properties/price"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the students were enrolled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "data"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": ["enrolment"],
                      "properties": {
                        "enrolment": {
                          "$ref": "#/components/schemas/EnroledRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/enrolment/update": {
      "post": {
        "summary": "Update a student's enrolment",
        "description": "Update a student's enrolment",
        "tags": ["enrolment"],
        "operationId": "groupPostEnrolUpdate",
        "security": [{"BearerJwt": []}],
        "parameters": [],
        "requestBody": {
          "description": "Request body for enroling students",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/EnroledRelation/properties/id"
                  },
                  "subject": {
                    "$ref": "#/components/schemas/Subject/properties/id"
                  },
                  "price": {
                    "$ref": "#/components/schemas/EnroledRelation/properties/price"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the students were enrolled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "data"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": ["enrolment"],
                      "properties": {
                        "enrolment": {
                          "$ref": "#/components/schemas/EnroledRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/enrolment/remove": {
      "post": {
        "summary": "Unenrol a student from a group",
        "description": "Update a group's enrolments to remove a student",
        "tags": ["enrolment"],
        "operationId": "groupPostUnenrol",
        "security": [{"BearerJwt": []}],
        "parameters": [],
        "requestBody": {
          "description": "Request body for unenroling students",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/EnroledRelation/properties/id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the students were unenrolled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/file/get": {
      "get": {
        "summary": "Get files by id",
        "description": "Get one or more file(s). Only the metadata is returned, along with a file path.",
        "tags": [
          "file"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the requested files were retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetFilesByIdOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "files"
                      ],
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/File"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of file IDs",
              "example": "file:12345,file:67890",
              "pattern": "^(file:\\w+,)*file:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "operationId": "getFilesById"
      }
    },
    "/file/remove": {
      "post": {
        "summary": "Remove files",
        "description": "This endpoint is used for deleting file(s) from the server. Only uploaders of the file can remove them.",
        "tags": [
          "file"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the requested files were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveFilesOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "files"
                      ],
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/File"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "removeFiles",
        "requestBody": {
          "description": "Request body for deleting a file or multiple files",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File/properties/id"
                    },
                    "description": "The ids of the files you want to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/file/create": {
      "post": {
        "summary": "Create a new file",
        "description": "This endpoint is used to create a new file.",
        "tags": [
          "file"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the file was created. Now you can upload the file to the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAFileCreated",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "file",
                        "token"
                      ],
                      "properties": {
                        "file": {
                          "$ref": "#/components/schemas/File"
                        },
                        "token": {
                          "type": "string",
                          "description": "The token to upload the file with.",
                          "example": "1234567890abcdef"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAFile",
        "requestBody": {
          "description": "The request body for creating a new file.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "mime_type",
                  "size"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "profile_picture.webp"
                  },
                  "mime_type": {
                    "type": "string",
                    "description": "The MIME type of the file",
                    "example": "image/webp"
                  },
                  "size": {
                    "type": "integer",
                    "description": "The size of the file in bytes",
                    "example": 123456
                  },
                  "shared_with": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File/properties/id"
                    },
                    "description": "The ids of the users the file is shared with"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/file/update": {
      "post": {
        "summary": "Update a file",
        "description": "This endpoint can be used to update a file as an uploader.",
        "tags": [
          "file"
        ],
        "security": [
          {
            "BearerJwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful, and the file was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAFileOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "file"
                      ],
                      "properties": {
                        "file": {
                          "$ref": "#/components/schemas/File"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateAFile",
        "requestBody": {
          "description": "The request body for updating a file.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/File/properties/id"
                  },
                  "name": {
                    "type": "string",
                    "example": "profile_picture.webp"
                  },
                  "shared_with": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Employee/properties/id"
                    },
                    "description": "The ids of the users the file is shared with"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/worksheet/get": {
      "get": {
        "summary": "Get worsheet of the logged in employee",
        "description": "Get the worksheet of the logged in employee",
        "tags": ["worksheet"],
        "operationId": "LoggedinWorksheets",
        "security": [{"BearerJwt": []}],
        "parameters": [
          {
            "name": "paid",
            "in": "query",
            "required": false,
            "description": "Wether to include paid records or not",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "responses": {
          "200": {
            "description": "The request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "data"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "worksheet": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorksheetRelation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/worksheet/remove": {
      "post": {
        "summary": "Remove worksheet items",
        "description": "This endpoint is used for removing or deleting worksheet items(s) from the database. Only admins and the owners of the items can make this request.",
        "tags": ["worksheet"],
        "security": [{"BearerJwt": []}],
        "parameters": [],
        "operationId": "removeWorksheetItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorksheetRelation/properties/id"
                    },
                    "description": "The ids of the worksheet items you want to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the requested worksheet were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveworksheetOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "success"
                      ],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "worksheet"
                      ],
                      "properties": {
                        "worksheet": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorksheetRelation/properties/id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/worksheet/update": {
      "post": {
        "summary": "Update a worksheet item",
        "description": "This endpoint can be used to update a worksheet item.",
        "tags": ["worksheet"],
        "security": [{"BearerJwt": []}],
        "responses": {
          "200": {
            "description": "The request was successful, and the worksheet item was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAworksheetOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "worksheet"
                      ],
                      "properties": {
                        "worksheet": {
                          "$ref": "#/components/schemas/WorksheetRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateAworksheet",
        "requestBody": {
          "description": "The request body for updating a worksheet. NOTE: the paid property can only be updated by admins",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/id"
                  },
                  "paid": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/paid"
                  },
                  "start": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/start"
                  },
                  "end": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/end"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/worksheet/create": {
      "post": {
        "summary": "Create a worksheet item",
        "description": "This endpoint can be used to create a worksheet item.",
        "tags": ["worksheet"],
        "security": [{"BearerJwt": []}],
        "responses": {
          "200": {
            "description": "The request was successful, and the worksheet item was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAworksheetOk",
                  "required": [
                    "data",
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "worksheet"
                      ],
                      "properties": {
                        "worksheet": {
                          "$ref": "#/components/schemas/WorksheetRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAworksheet",
        "requestBody": {
          "description": "The request body for creating a worksheet. NOTE: the employee property is only available to admins and is the current user by default.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "start", "end"
                ],
                "properties": {
                  "employee": {
                    "$ref": "#/components/schemas/Employee/properties/id"
                  },
                  "out": {
                    "$ref": "#/components/schemas/Lesson/properties/id"
                  },
                  "start": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/start"
                  },
                  "end": {
                    "$ref": "#/components/schemas/WorksheetRelation/properties/end"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/replacement/get": {
      "get": {
        "summary": "Get a replacement by id",
        "description": "Get a replacement by id",
        "tags": ["replacement"],
        "operationId": "replacementGetById",
        "security": [{"BearerJwt": []}],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of replacement IDs",
              "example": "replaced:12345,replaced:67890",
              "pattern": "^(replaced:\\w+,)*replaced:\\w+$"
            }
          },
          {"$ref": "#/components/parameters/include"},
          {"$ref": "#/components/parameters/fetch"}
        ],
        "responses": {
          "200": {
            "description": "The request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["code", "data"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": ["replacements"],
                      "properties": {
                        "worksheet": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReplacedRelation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/replacement/remove": {
      "post": {
        "summary": "Remove replacements",
        "description": "Remove replacements by id",
        "tags": ["replacement"],
        "security": [{"BearerJwt": []}],
        "parameters": [],
        "operationId": "removereplacementItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["ids"],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReplacedRelation/properties/id"
                    },
                    "description": "The ids of the replacement items you want to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful, and the requested replacement were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "RemoveReplacementOk",
                  "required": ["data", "code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"],
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "required": ["replacements"],
                      "properties": {
                        "replacements": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ReplacedRelation/properties/id"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/replacement/update": {
      "post": {
        "summary": "Update a replacement",
        "description": "Update a replacement",
        "tags": ["replacement"],
        "security": [{"BearerJwt": []}],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "UpdateAReplacementOk",
                  "required": ["data","code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": ["replacement"],
                      "properties": {
                        "replacement": {
                          "$ref": "#/components/schemas/ReplacedRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "updateAreplacement",
        "requestBody": {
          "description": "The request body for updating a replacement.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ReplacedRelation/properties/id"
                  },
                  "extension": {
                    "$ref": "#/components/schemas/ReplacedRelation/properties/extension"
                  },
                  "original": {
                    "$ref": "#/components/schemas/ReplacedRelation/properties/original"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/replacement/create": {
      "post": {
        "summary": "Create a replacement",
        "description": "Create a new replacement",
        "tags": ["replacement"],
        "security": [{"BearerJwt": []}],
        "responses": {
          "200": {
            "description": "The request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CreateAReplacementOk",
                  "required": ["data","code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["success"]
                    },
                    "data": {
                      "type": "object",
                      "required": ["replacement"],
                      "properties": {
                        "replacement": {
                          "$ref": "#/components/schemas/ReplacedRelation"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "operationId": "createAReplacement",
        "requestBody": {
          "description": "The request body for creating a replacement",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "$ref": "#/components/schemas/Student/properties/id"
                  },
                  "original_lesson": {
                    "$ref": "#/components/schemas/Lesson/properties/id"
                  },
                  "replacement_lesson": {
                    "$ref": "#/components/schemas/Lesson/properties/id"
                  },
                  "extension": {
                    "$ref": "#/components/schemas/ReplacedRelation/properties/extension"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Employee": {
        "type": "object",
        "description": "Employee information",
        "required": [
          "id",
          "created",
          "name",
          "email",
          "roles"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "employee:abc123",
            "pattern": "^employee:.+$"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 48,
            "description": "Full name of the employee"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "example": [
              "teacher",
              "administrator"
            ],
            "description": "Roles assigned to the employee"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          }
        }
      },
      "EmployeeExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Employee"
          },
          {
            "type": "object",
            "properties": {
              "worksheet": {
                "type": "array",
                "description": "The unpaid part of this employee's worksheet",
                "items": {
                  "$ref": "#/components/schemas/WorksheetRelation"
                }
              },
              "groups": {
                "type": "array",
                "description": "The groups this employee is teaching",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Group/properties/id"
                    },
                    {
                      "$ref": "#/components/schemas/Group"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Location": {
        "type": "object",
        "description": "A location object",
        "properties": {
          "id": {
            "type": "string",
            "example": "location:abc123",
            "pattern": "^location:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "name": {
            "type": "string",
            "description": "The name of the location",
            "example": "Kecskem√©ti Kod√°ly Zolt√°n √ânek-Zenei √Åltal√°nos Iskola"
          },
          "address": {
            "type": "string",
            "description": "The address of the location",
            "example": "6000 Kecskem√©t, D√≥zsa Gy√∂rgy √∫t 22."
          },
          "contact_email": {
            "$ref": "#/components/schemas/Email"
          },
          "contact_phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "address",
          "contact_email",
          "contact_phone"
        ]
      },
      "LocationExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Location"
          },
          {
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "description": "The groups that are held at this location",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Group/properties/id"
                    },
                    {
                      "$ref": "#/components/schemas/Group"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Invite": {
        "type": "object",
        "description": "An invite object",
        "required": [
          "id",
          "created",
          "author",
          "roles"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "invite:abc123",
            "pattern": "^invite:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Employee/properties/id"
              },
              {
                "$ref": "#/components/schemas/Employee"
              }
            ]
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "example": [
              "teacher",
              "administrator"
            ],
            "description": "Roles assigned to the employee"
          }
        }
      },
      "Subject": {
        "type": "object",
        "description": "A subject object",
        "required": [
          "id",
          "created",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "subject:abc123",
            "pattern": "^subject:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "name": {
            "type": "string",
            "description": "The name of the subject",
            "example": "Scratch"
          },
          "description": {
            "type": "string",
            "description": "The description of the subject",
            "example": "A fun programming language for kids"
          }
        }
      },
      "Group": {
        "type": "object",
        "description": "A group object",
        "required": [
          "id",
          "created",
          "location",
          "archived",
          "teachers"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "group:abc123",
            "pattern": "^group:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Kod√°ly 16:00 Scratch"
          },
          "location": {
            "anyOf": [
              {"$ref": "#/components/schemas/Location"},
              {"$ref": "#/components/schemas/Location/properties/id"}
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the group is archived or not",
            "example": false
          },
          "teachers": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Employee/properties/id"
                },
                {
                  "$ref": "#/components/schemas/Employee"
                }
              ]
            },
            "description": "The teachers assigned to the group"
          }
        }
      },
      "GroupExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Group"
          },
          {
            "type": "object",
            "properties": {
              "lessons": {
                "type": "array",
                "description": "The lessons assigned to this group",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Lesson/properties/id"
                    },
                    {
                      "$ref": "#/components/schemas/Lesson"
                    }
                  ]
                }
              },
              "enroled": {
                "type": "array",
                "description": "The student enrolments to this group",
                "items": {
                  "$ref": "#/components/schemas/EnroledRelation"
                }
              },
              "subjects": {
                "type": "array",
                "description": "The subjects assigned to this group",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Subject/properties/id"
                    },
                    {
                      "$ref": "#/components/schemas/Subject"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Student": {
        "type": "object",
        "description": "A student object",
        "required": [
          "id",
          "created",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "student:abc123",
            "pattern": "^student:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "name": {
            "type": "string",
            "description": "The name of the student",
            "example": "John Doe"
          },
          "parent": {
            "type": "object",
            "description": "The name of the parent or guardian",
            "required": [
              "name",
              "email",
              "phone"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the parent or guardian",
                "example": "Jane Doe"
              },
              "email": {
                "$ref": "#/components/schemas/Email"
              },
              "phone": {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            }
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "grade": {
            "type": "number",
            "description": "The grade of the student",
            "example": 5
          }
        }
      },
      "StudentExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Student"
          },
          {
            "type": "object",
            "properties": {
              "enroled": {
                "type": "array",
                "description": "The group enrolments of this student",
                "items": {
                  "$ref": "#/components/schemas/EnroledRelation"
                }
              }
            }
          }
        ]
      },
      "File": {
        "type": "object",
        "description": "A file object",
        "required": [
          "id",
          "created",
          "author",
          "name",
          "mime_type",
          "size",
          "path"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "file:abc123",
            "pattern": "^file:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "author": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Employee/properties/id"
              },
              {
                "$ref": "#/components/schemas/Employee"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the file",
            "example": "profile_picture.webp"
          },
          "mime_type": {
            "type": "string",
            "description": "The MIME type of the file",
            "example": "image/webp"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file in bytes",
            "example": 123456
          },
          "path": {
            "type": "string",
            "description": "The path to the file on the server",
            "example": "/uploads/profile_picture.webp"
          }
        }
      },
      "EnroledRelation": {
        "type": "object",
        "description": "A relation object for the Enroled table",
        "required": [
          "id",
          "created",
          "in",
          "out",
          "subject",
          "price"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "enroled:abc123",
            "pattern": "^enroled:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Student/properties/id"
              },
              {
                "$ref": "#/components/schemas/Student"
              }
            ]
          },
          "out": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Group/properties/id"
              },
              {
                "$ref": "#/components/schemas/Group"
              }
            ]
          },
          "subject": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Subject/properties/id"
              },
              {
                "$ref": "#/components/schemas/Subject"
              }
            ]
          },
          "price": {
            "type": "number",
            "description": "The price of the course",
            "example": 10000
          }
        }
      },
      "Lesson": {
        "type": "object",
        "description": "A lesson object",
        "required": [
          "id",
          "created",
          "start",
          "end"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "lesson:abc123",
            "pattern": "^lesson:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "name": {
            "type": "string",
            "description": "The name of the lesson",
            "example": "Scratch lesson 1"
          },
          "group": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Group/properties/id"
              },
              {
                "$ref": "#/components/schemas/Group"
              }
            ]
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "teachers": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Employee/properties/id"
                },
                {
                  "$ref": "#/components/schemas/Employee"
                }
              ]
            }
          },
          "start": {
            "$ref": "#/components/schemas/Datetime"
          },
          "end": {
            "$ref": "#/components/schemas/Datetime"
          }
        }
      },
      "LessonExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Lesson"
          },
          {
            "type": "object",
            "properties": {
              "enroled": {
                "type": "array",
                "description": "The student enrolments to this lesson",
                "items": {
                  "$ref": "#/components/schemas/EnroledRelation"
                }
              },
              "replaced": {
                "type": "array",
                "description": "The students who replaced another lesson with this one",
                "items": {
                  "$ref": "#/components/schemas/ReplacedRelation"
                }
              },
              "attended": {
                "type": "array",
                "description": "The students who attended this lesson",
                "items": {
                  "$ref": "#/components/schemas/AttendedRelation"
                }
              }
            }
          }
        ]
      },
      "ReplacedRelation": {
        "type": "object",
        "description": "A student replaced a lesson with another one to make up for a missed lesson",
        "required": [
          "id",
          "created",
          "in",
          "out",
          "original"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "replaced:abc123",
            "pattern": "^replaced:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Student/properties/id"
              },
              {
                "$ref": "#/components/schemas/Student"
              }
            ]
          },
          "out": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Lesson/properties/id"
              },
              {
                "$ref": "#/components/schemas/Lesson"
              }
            ]
          },
          "original": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Lesson/properties/id"
              },
              {
                "$ref": "#/components/schemas/Lesson"
              }
            ]
          },
          "extension": {
            "type": "string",
            "description": "The extension length in surrealdb duration format"
          }
        }
      },
      "AttendedRelation": {
        "type": "object",
        "description": "A student attended a lesson",
        "required": [
          "id",
          "created",
          "in",
          "out",
          "paid"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "attended:abc123",
            "pattern": "^attended:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Student/properties/id"
              },
              {
                "$ref": "#/components/schemas/Student"
              }
            ]
          },
          "out": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Lesson/properties/id"
              },
              {
                "$ref": "#/components/schemas/Lesson"
              }
            ]
          }
        }
      },
      "WorksheetRelation": {
        "type": "object",
        "description": "An employee worked somewhere",
        "required": [
          "id",
          "created",
          "in",
          "out",
          "paid",
          "start",
          "end"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "worked_at:abc123",
            "pattern": "^worked_at:.+$"
          },
          "created": {
            "$ref": "#/components/schemas/Datetime"
          },
          "in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Employee/properties/id"
              },
              {
                "$ref": "#/components/schemas/Employee"
              }
            ]
          },
          "out": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Lesson/properties/id"
              },
              {
                "$ref": "#/components/schemas/Lesson"
              }
            ]
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the lesson was paid for or not",
            "example": true
          },
          "start": {
            "$ref": "#/components/schemas/Datetime"
          },
          "end": {
            "$ref": "#/components/schemas/Datetime"
          }
        }
      },
      "Email": {
        "type": "string",
        "format": "email",
        "description": "A string in email address format."
      },
      "PhoneNumber": {
        "type": "string",
        "example": "+36301131313",
        "description": "A telephone number starting with country code"
      },
      "Password": {
        "type": "string",
        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*\\W).{8,}$",
        "example": "Password1234#"
      },
      "Role": {
        "type": "string",
        "description": "A role is a string that can either be \"administrator\" or \"teacher\". More roles may be added in the future.",
        "enum": [
          "administrator",
          "teacher"
        ],
        "example": "administrator"
      },
      "Datetime": {
        "type": "string",
        "description": "ISO 8601 date-time string",
        "format": "date-time",
        "example": "2023-10-15T14:30:00.000Z"
      }
    },
    "responses": {
      "NotFound": {
        "description": "The requested resource was not found on the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message",
                "code"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "not_found"
                  ],
                  "type": "string",
                  "example": "not_found"
                },
                "message": {
                  "type": "string",
                  "example": "Some error message..."
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Something is missing or incorrect in the client's request, so the server cannot process it.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message",
                "code"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "server_error",
                    "bad_request",
                    "not_found",
                    "unauthorized",
                    "forbidden",
                    "invalid_credentials",
                    "invalid_request_body",
                    "fields_required",
                    "fields_invalid",
                    "password_too_weak",
                    "email_in_use",
                    "invalid_invite"
                  ],
                  "type": "string",
                  "example": "bad_request"
                },
                "message": {
                  "type": "string",
                  "example": "Some error message..."
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication is required to access the requested resource. The client must include the appropriate credentials.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message",
                "code"
              ],
              "properties": {
                "code": {
                  "enum": [
                    "unauthorized"
                  ],
                  "type": "string",
                  "example": "unauthorized"
                },
                "message": {
                  "type": "string",
                  "example": "You are not authorized to perform this action"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "include": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "regex",
          "pattern": "^(\\w+,)*\\w+$",
          "description": "Comma-separated list of extra fields to include",
          "example": "field1,field2"
        }
      },
      "fetch": {
        "name": "fetch",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "regex",
          "pattern": "^(\\w+(\\.\\w+){0,1},)*\\w+(\\.\\w+){0,1}$",
          "description": "Comma-separated list of fields to further expand on, maximum of one level deep",
          "example": "normal_field,object_or_list.property"
        }
      }
    },
    "securitySchemes": {
      "BearerJwt": {
        "type": "http",
        "scheme": "bearer",
        "description": "This is the token used for authenticating users",
        "bearerFormat": "Json Web Token (JWT)"
      }
    }
  }
}